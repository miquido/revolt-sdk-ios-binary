// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Revolt
import CoreData
import Foundation
import Swift
import SystemConfiguration
import UIKit
public enum Gender : Swift.String, Swift.Codable {
  case male
  case female
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct UserCredentials {
}
extension UIDevice {
  public static var deviceId: Swift.String
  public static var brand: Swift.String
  public static var modelName: Swift.String
  public static var inchScreenSize: Foundation.Decimal {
    get
  }
}
public enum LogLevel : Swift.Int {
  case disabled
  case error
  case info
  case debug
  case verbose
  case warning
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Revolt : ObjectiveC.NSObject {
  public enum EventCustomType<T> where T : Swift.Decodable, T : Swift.Encodable {
    case json(data: Foundation.Data)
    case raw(dictionary: [Swift.String : Any])
    case codable(object: T)
  }
  public enum EventType {
    case profile(appUserId: Swift.String, birthYear: Swift.Int64?, gender: Revolt.Gender, country: Swift.String?, city: Swift.String?)
    case signIn(appUserId: Swift.String)
    case signOut(appUserId: Swift.String)
  }
  @objc(setupTrackingId:secretId:maxBatchSize:maxEventsInStorage:minEventDelay:maxEventDelay:serviceAddress:screenTrackingEnabled:) public class func setup(trackingId: Swift.String, secretId: Swift.String, maxBatchSize: Swift.Int = 20, maxEventsInStorage: Swift.Int = 10_000, minEventDelay: Foundation.TimeInterval = 0.5, maxEventDelay: Foundation.TimeInterval = 5 * 60, serviceAddress: Swift.String, screenTrackingEnabled: Swift.Bool = true)
  public class func setLog(level: Revolt.LogLevel)
  public class func getAllLogs() -> Swift.String?
  public class func isRunning() -> Swift.Bool
  @discardableResult
  @objc(start) public class func start() -> Swift.Bool
  @discardableResult
  @objc(stop) public class func stop() -> Swift.Bool
  public class func send(event: Revolt.Revolt.EventType)
  @objc(sendProfileAppUserId:birthYear:gender:country:city:) public class func sendProfile(appUserId: Swift.String, birthYear: Swift.Int64, gender: Swift.String, country: Swift.String?, city: Swift.String?)
  @objc(sendUserSignInAppUserId:) public class func sendUserSignIn(appUserId: Swift.String)
  @objc(sendUserSignOutAppUserId:) public class func sendUserSignOut(appUserId: Swift.String)
  public static func sendEventCustom<T>(event: Revolt.Revolt.EventCustomType<T>, name: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  public static func sendEventCustom(name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Event) public class Event : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Event {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Revolt.Event>
  @objc @NSManaged dynamic public var data: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set(value)
  }
}
